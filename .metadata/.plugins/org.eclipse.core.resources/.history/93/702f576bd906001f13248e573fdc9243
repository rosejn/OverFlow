package overFlow.main;

import java.awt.Color;
import java.awt.Menu;
import java.awt.event.KeyEvent;
import java.lang.reflect.Modifier;
import java.util.Iterator;
import java.util.Vector;

import com.sun.scenario.scenegraph.SGGroup;

public final class SelectionManager {
	
	private SGGroup selectionGroup = new SGGroup();
	
	public static Vector currentSelectedConnections = new Vector();
	public static Vector currentSelectedObjects = new Vector();
	
	
	public static void keyTyped(KeyEvent e){
		char letter = e.getKeyChar();
////////////Move selected objects with arrows, hold shift to move by 10 pixels /////////////////
        arrowKeyMover(e.getModifiers(), e.getKeyCode());
        ///////////////////////end of translation arrows////////////////////


        if(e.getKeyCode() == 8 && letter == 'v') {      // vertical alignment tools
          alignVertical();
        }

        if(e.getModifiers() == 8 && letter == 'h') {      // horizontal alignment tools
          alignHorizontal();
        }

        if(e.getModifiers() == 8 && letter == 'b') {      // bring selected to front
            bringSelectedToFront();
          }

        if(e.getKeyCode() == 127) {    //delete selected objects
          deleteSelected();  
        }

        if(e.getModifiers() == 8 && e.getKeyChar() == 'e') {    //set edit mode toggle withh alt-e
          if(OverFlowMain.editMode) {
        	  OverFlowMain.editMode = false;
//        	  hideEditTools();
        	  OverFlowMain.grid.setVisible(false);
        	  OverFlowMain.editModeLabel.setText("User Mode");
 //             Menu.setEditMode(false);
          }
          else {
        	  OverFlowMain.editMode = true;
        	  OverFlowMain.grid.setVisible(true);
//              unselectAll();
              OverFlowMain.editModeLabel.setText("Edit Mode");
//              Menu.setEditMode(true);
          } 
        }
        if(MainFrameInput.creatingObject) {
          if(e.getKeyCode() == 8 ){
        	  
          }

          if(e.getKeyCode() == 10){
        	  MainFrameInput.objCreator.setVisible(false);
        	  MainFrameInput.creatingObject = false;
        	  MainFrameInput.objCreator.createObject();
          }
        }
        if(OverFlowMain.editMode && !MainFrameInput.creatingObject){
          switch (letter) {
          case 'n':
        	  MainFrameInput.creatingObject = true;
        	  MainFrameInput.objCreator.setLocation(OverFlowMain.frameMouseX, OverFlowMain.frameMouseY);
        	  MainFrameInput.objCreator.setVisible(true);
            break;
          }

          if(e.getKeyCode() == 10){
        	  MainFrameInput.objCreator.setVisible(false);
          }
        }
	}
	
	 public static void bringSelectedToFront() {
		    for(Iterator i = OverFlowMain.currentSelectedObjects.iterator(); i.hasNext();) {
		        Node obj = (Node)i.next();
		        obj.bringToFront();
       }
	}
	  void unselectAll() {
		    for(Iterator i = OverFlowMain.currentSelectedConnections.iterator(); i.hasNext();) {
		      Connection con = (Connection)i.next();
		      con.setSelected(false);
		    }
		    for(Iterator i = OverFlowMain.currentSelectedObjects.iterator(); i.hasNext();) {
		      Node obj = (Node)i.next();
		      obj.setSelected(false);
		      selectionGroup.remove(obj.returnGroup());
		    }
		    OverFlowMain.currentSelectedConnections.removeAllElements();
		    OverFlowMain.currentSelectedObjects.removeAllElements();
		  }  

		  void updateAllSelectedConnections() {
		    for(int i = 0; i < OverFlowMain.currentSelectedObjects.size() - 1; i++) {
		      Node obj = (Node) OverFlowMain.currentSelectedObjects.get(i);
		      obj.updateConnectionLines();
		    }
		  }  

		  static void deleteSelected() { 
		    for(Iterator i = OverFlowMain.currentSelectedConnections.iterator(); i.hasNext();) {
		      Connection con = (Connection)i.next();
		      con.kill();
		    }
		    for(Iterator i = OverFlowMain.currentSelectedObjects.iterator(); i.hasNext();) {
		      Node obj = (Node)i.next();
		      obj.killConnections();
		      OverFlowMain.objects.remove(obj);
		      OverFlowMain.rootGroup.remove(obj.returnGroup());
		    }
		    OverFlowMain.currentSelectedObjects.removeAllElements();
		    OverFlowMain.currentSelectedConnections.removeAllElements();
		  } 
	  
	 public static void alignVertical() {
	    Float averageVal = 0f;
	    for(Iterator i = OverFlowMain.currentSelectedObjects.iterator(); i.hasNext();) {
	      Node n = (Node)i.next();
	 //     averageVal += n.getGlobalX() - n.groupT.getTranslateX();
	    }
	    averageVal /= OverFlowMain.currentSelectedObjects.size();
	    for(Iterator i = OverFlowMain.currentSelectedObjects.iterator(); i.hasNext();) {
	      Node n = (Node)i.next();
	      n.groupT.setTranslateX(averageVal);
	      n.updateConnectionLines();    
	    }
	  }

	  static void alignHorizontal() {

	    float averageVal = 0f;
	    for(Iterator i = OverFlowMain.currentSelectedObjects.iterator(); i.hasNext();) {
	      Node obj = (Node)i.next();
	      averageVal += obj.getGlobalY() - obj.groupT.getTranslateY();
	    }
	    averageVal /= OverFlowMain.currentSelectedObjects.size();
	    for(Iterator i = OverFlowMain.currentSelectedObjects.iterator(); i.hasNext();) {
	      Node obj = (Node)i.next();
	      obj.groupT.setTranslateY(averageVal);
	      obj.updateConnectionLines();  
	    }
	  }
	  
	  public static void arrowKeyMover (int modifier, int keyId){
	      for(Iterator i = OverFlowMain.currentSelectedObjects.iterator(); i.hasNext();) {    
	          Node n = (Node)i.next();
	          if(keyId == 37) {
	            if(modifier == 1) {
	              n.groupT.translateBy(-10,0); 
	              n.setGlobal(-10, 0);
	              n.updateConnectionLines();             
	            }
	            n.groupT.translateBy(-1,0);
	            n.updateConnectionLines();
	          }
	          if(keyId == 39) {
	            if(modifier == 1) {
	              n.groupT.translateBy(10,0); 
	              n.setGlobal(10, 0);       
	              n.updateConnectionLines();      
	            }
	            n.groupT.translateBy(1,0);
	            n.updateConnectionLines();
	            n.setGlobal(1, 0);
	          }
	          if(keyId == 38) {
	            if(modifier == 1) {
	              n.groupT.translateBy(0,-10);
	              n.setGlobal(0, -10);
	              n.updateConnectionLines();              
	            }
	            n.groupT.translateBy(0,-1);
	            n.setGlobal(0, -1);
	            n.updateConnectionLines();
	          }
	          if(keyId == 40) {
	            if(modifier == 1) {
	              n.groupT.translateBy(0,10);
	              n.setGlobal(0, 10);
	              n.updateConnectionLines();              
	            }
	            n.groupT.translateBy(0,1);
	            n.setGlobal(0, 1);
	            n.updateConnectionLines();
	          }
	      }
	  }
}
