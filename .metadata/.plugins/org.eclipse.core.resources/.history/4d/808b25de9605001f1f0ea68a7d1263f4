import com.sun.scenario.effect.DropShadow;
import com.sun.scenario.scenegraph.SGGroup;
import com.sun.scenario.scenegraph.SGShape;
import com.sun.scenario.scenegraph.SGText;
import com.sun.scenario.scenegraph.SGTransform;
import com.sun.scenario.scenegraph.fx.FXShape;


/*
this class is used to control:
 - selection tool
 - menubar (not implemented yet)
 - manage main frame key and mouse events for object creation and selection tool
 */


public class MainWindowGraphics {          
  SGGroup selectionGroup = new SGGroup();
  SGTransform.Translate sGroup = SGTransform.createTranslation(0, 0, selectionGroup);
  SGGroup selectedGroup = new SGGroup();
  SGGroup group = new SGGroup();
  SGGroup menu = new SGGroup();
  SGText tutorial = new SGText();


  FXShape selectionBox = new FXShape();
  FXShape menuBackground = new FXShape();
  FXShape editModeButton = new FXShape();
  FXShape snapModeButton = new FXShape();
  DropShadow eBtnShadow = new DropShadow();

  SGShape window = new SGShape();

  boolean selecting = false;
  boolean creatingObject;
  char[] newObjectName = new char[1];
  ObjCreator objCreator;

  float windowX;
  float windowY;
  float pWindowX;
  float pWindowY;
  float yVel;
  float xVel;

  char letter;

  long oldTime;

  MainWindowGraphics() {    
    createMenu();
    editModeButton();
    createSlectionBox();
    group.add(selectedGroup);
    group.add(window);
    rootGroup.add(grid.lineGroup);
    rootGroup.add(group);
    objCreator = new ObjCreator(frameMouseX, frameMouseY);

    window.setShape(new Rectangle2D.Float(0,0,1000,1000));
    window.setMode(SGShape.Mode.STROKE); 
    window.setDrawStroke(new BasicStroke(0.0f));
    window.setDrawPaint(new Color(150,150,150, 0));
    window.addMouseListener(new SGMouseAdapter() {
      Point pos;
      Point pPos;
      Point p;
      Point new_p;
      void mouseMoved(MouseEvent e, SGNode n) {
        pos = e.getPoint();
        frameMouseX = pos.x;
        frameMouseY = pos.y;
      }
      void mousePressed(MouseEvent e, SGNode n){
        new_p = e.getPoint();
        if(editMode){
          pPos = e.getPoint();    //set global variables
          windowX = (float) pPos.getX();
          windowY = (float) pPos.getY();

          if(creatingObject && !objCreator.over){  //if creating a new object and click is outside of it, finish creating it
            objCreator.setVisible(false);
            creatingObject = false;
            newObjectName = new char[1];
            objCreator.createObject();
          }

          if(!objectOver) {
            selecting = true;
            selectionBox.setVisible(true);  //only show if not over an object
            if(!connectionOver) {
              //   unselectAll();  //if click over nothing, unselect everything 
            }
          }

          if(sys.nanoTime() - oldTime < 2.0000000E8) {
            if(!objectOver && !overMenu){
              creatingObject = true;
              objCreator.setLocation(frameMouseX, frameMouseY);
              objCreator.setVisible(true);
            }
          }
          oldTime = sys.nanoTime();

        }
        p = e.getPoint();
      }

      void mouseExited(MouseEvent e, SGNode n) {
      }
      void mouseReleased(MouseEvent e, SGNode n) {
        frameDragged = false;
        selectionBox.setVisible(false);  
        selecting = false;
        selectionBox.setShape(new Rectangle2D.Float(0,0,0,0));
        for(Iterator i = currentSelectedObjects.iterator(); i.hasNext();) {  
          Node obj = (Node)i.next();
          obj.movingSelected = false;
        }
      }
      void mouseDragged(MouseEvent e, SGNode n) {
        if(currentSelectedObjects.size() > 1) {
          sGroup.translateBy(xVel, yVel);


        }
        frameDragged = true;
        pos = e.getPoint();
        new_p = pos;

        /////Global window variables
        windowX = (float) pos.getX();
        windowY = (float) pos.getY();

        if(windowX - pWindowX < 100){
          xVel = windowX - pWindowX;
        }
        else {
          xVel = 0;
        }
        if(windowY - pWindowY < 100){
          yVel = windowY - pWindowY;
        }
        else {
          yVel = 0;
        }
        /////end globals

        for(Iterator i = currentSelectedObjects.iterator(); i.hasNext();) {      //sets a boolean telling the nodes whether they arebeing moved by a group translatino or a local, individual translation
          Node tn = (Node)i.next();
          if(tn.selected && !selecting){
            tn.movingSelected = true;
            tn.groupT.translateBy(xVel, yVel); 
            tn.setGlobal(xVel, yVel);
            tn.updateConnectionLines();
          }
          else {
            tn.movingSelected = false;
          }
        }

        if(editMode && !connecting){
          Rectangle2D.Double rect = getSelectionRect(pPos, pos); 
          selectionBox.setShape(new Rectangle2D.Double(rect.getX(), rect.getY(), rect.getWidth(), rect.getHeight()));

          for(Iterator i = objects.iterator();  i.hasNext();) {
            Node obj = (Node)i.next();
            Point2D.Float p = new Point2D.Float(obj.x, obj.y);

            if(selecting){    //this creates a selection box only if mouse is not over an object
              if(obj.getGlobalX() > rect.getX() && obj.getGlobalY() > rect.getY() && obj.getGlobalX() < rect.getWidth() + rect.getX() && obj.getGlobalY() < rect.getY() + rect.getHeight() || obj.getGlobalX() + obj.w > rect.getX() && obj.getGlobalY() + obj.h > rect.getY() && obj.getGlobalX() + obj.w < rect.getWidth() + rect.getX() && obj.getGlobalY() + obj.h < rect.getY() + rect.getHeight()){  //check if an object is with in the selection area
                if(!currentSelectedObjects.contains(obj)){
                  obj.setSelected(true);
                  obj.movingSelected = true;
                }
              }
              else {
                if(currentSelectedObjects.contains(obj)){
                  obj.setSelected(false);
                  obj.movingSelected = false;
                }
              }
            }
          }
          pWindowX = windowX;
          pWindowY = windowY;
        }
        p = pos;
      }
    }
    );

    window.addKeyListener(new SGKeyListener() {
      void keyPressed(java.awt.event.KeyEvent e, SGNode node) {      
        if(e.getKeyChar() != '?'){
          letter = e.getKeyChar();
        }

        ////////////  Move selected objects with arrows, hold shift to move by 10 pixels /////////////////
        for(Iterator i = currentSelectedObjects.iterator(); i.hasNext();) {    
          Node n = (Node)i.next();
          if(e.getKeyCode() == 37) {
            if(e.getModifiers() == 1) {
              n.groupT.translateBy(-10,0); 
              n.setGlobal(-10.0, 0);
              n.updateConnectionLines();             
            }
            n.groupT.translateBy(-1,0);
            n.updateConnectionLines();
          }
          if(e.getKeyCode() == 39) {
            if(e.getModifiers() == 1) {
              n.groupT.translateBy(10,0); 
              n.setGlobal(10.0, 0);       
              n.updateConnectionLines();      
            }
            n.groupT.translateBy(1,0);
            n.updateConnectionLines();
            n.setGlobal(1.0, 0);
          }
          if(e.getKeyCode() == 38) {
            if(e.getModifiers() == 1) {
              n.groupT.translateBy(0,-10);
              n.setGlobal(0, -10.0);
              n.updateConnectionLines();              
            }
            n.groupT.translateBy(0,-1);
            n.setGlobal(0, -1.0);
            n.updateConnectionLines();
          }
          if(e.getKeyCode() == 40) {
            if(e.getModifiers() == 1) {
              n.groupT.translateBy(0,10);
              n.setGlobal(0, 10.0);
              n.updateConnectionLines();              
            }
            n.groupT.translateBy(0,1);
            n.setGlobal(0, 1.0);
            n.updateConnectionLines();
          }
        }

        ///////////////////////end of translation arrows////////////////////



        if(e.getModifiers() == 8 && letter == 'v') {      // vertical alignment tools
          alignVertical();

        }

        if(e.getModifiers() == 8 && letter == 'h') {      // horizontal alignment tools
          alignHorizontal();
        }


        if(e.getKeyCode() == 127) {    //delete selected objects
          deleteSelected();  
        }

        if(e.getModifiers() == 8 && e.getKeyChar() == 'e') {    //set editmode toggle withh alt-e
          if(editMode) {
            editMode = false;
            grid.setVisible(false);
            editModeLabel.setText("User Mode");
            editModeButton.setFillPaint(new Color(200,200,200));
          }
          else {
            editMode = true;
            grid.setVisible(true);
            unselectAll();
            editModeLabel.setText("Edit Mode");
            editModeButton.setFillPaint(new Color(150,150,150));
          } 
        }
        if(creatingObject) {
          if(e.getKeyCode() == 8 ){
            newObjectName = subset(newObjectName, 0, newObjectName.length - 1);
          }
          newObjectName = expand(newObjectName, newObjectName.length + 1);
          newObjectName[newObjectName.length - 1] = letter;
          String label = new String(newObjectName);
          objCreator.updateWidth(); 
          String l;
          l = label.substring(1, label.length() - 1);
          objCreator.setText(l);

          if(e.getKeyCode() == 10){
            objCreator.setVisible(false);
            creatingObject = false;
            newObjectName = new char[1];
            objCreator.createObject();
          }
        }
        if(editMode && !creatingObject){
          switch (letter) {
          case 'n':
            creatingObject = true;
            objCreator.setLocation(frameMouseX, frameMouseY);
            objCreator.setVisible(true);
            break;
          }

          if(e.getKeyCode() == 10){
            objCreator.setVisible(false);
          }
        }
      }
      void keyReleased(java.awt.event.KeyEvent e, SGNode node) {
      }
      void keyTyped(java.awt.event.KeyEvent e, SGNode node) {
      }      
    }
    );
  }

  void createMenu() {
    Dimension2D d = gpanel.getSize();
    menuBackground.setShape(new Rectangle2D.Float(0, 0, 1000, 40));
    menuBackground.setFillPaint(new Color(230, 230, 230, 170));      
    menuBackground.setMode(SGShape.Mode.FILL); 
    menuBackground.setDrawPaint(new Color(150,150,150));
    menuBackground.setAntialiasingHint(RenderingHints.VALUE_ANTIALIAS_ON);
    menuBackground.addMouseListener(new SGMouseAdapter() {
      Point pos;
      void mouseEntered(MouseEvent e, SGNode n) {
        FXShape node = (FXShape)n;
        if(editMode){
          overMenu = true;
        }
      }
      void mouseExited(MouseEvent e, SGNode n) {
        FXShape node = (FXShape)n;
        if(editMode){
          overMenu = false;
        }
      }
    }
    );
    menu.add(menuBackground);
    group.add(menu);
  }

  void createSlectionBox() {
    selectionBox.setShape(new Rectangle2D.Double(0, 0, 0, 0));
    selectionBox.setFillPaint(new Color(0, 255, 0, 20));      
    selectionBox.setMode(SGShape.Mode.STROKE_FILL); 
    selectionBox.setDrawPaint(new Color(0,0,255,20));
    selectionBox.setAntialiasingHint(RenderingHints.VALUE_ANTIALIAS_ON);
    selectionBox.setVisible(false);
    menu.add(selectionBox);
  }

  Rectangle2D.Double getSelectionRect(Point p1, Point p2) {    //this handles the selection box so that when you draw in any direction in draws the shape correctly
    double pX = p1.getX();
    double pY = p1.getY();
    double x = p2.getX();
    double y = p2.getY();
    double xLeft = 0;
    double xRight = 0;
    double yTop = 0;
    double yBottom = 0;

    if(pX < x) {
      xLeft = pX;
      xRight = x;
    }
    else if (pX > x){
      xLeft = x;
      xRight = pX;
    }
    if(pY < y) {
      yTop = pY;
      yBottom = y; 
    }  
    else {
      yTop = y;
      yBottom = pY;   
    } 
    Rectangle2D.Double rect = new Rectangle2D.Double(xLeft, yTop, xRight - xLeft, yBottom - yTop);
    return rect; 
  }

  void unselectAll() {
    for(Iterator i = currentSelectedConnections.iterator(); i.hasNext();) {
      Connection con = (Connection)i.next();
      con.setSelected(false);
    }
    for(Iterator i = currentSelectedObjects.iterator(); i.hasNext();) {
      Node obj = (Node)i.next();
      obj.setSelected(false);
      selectionGroup.remove(obj.returnGroup());
    }
    currentSelectedConnections.removeAllElements();
    currentSelectedObjects.removeAllElements();
  }  

  void updateAllSelectedConnections() {
    for(int i = 0; i < currentSelectedObjects.size() - 1; i++) {
      Node obj = (Node) currentSelectedObjects.get(i);
      obj.updateConnectionLines();
    }
  }  



  void deleteSelected() { 
    for(Iterator i = currentSelectedConnections.iterator(); i.hasNext();) {
      Connection con = (Connection)i.next();
      connections.remove(con);
      rootGroup.remove(con.returnGroup());
    }
    for(Iterator i = currentSelectedObjects.iterator(); i.hasNext();) {
      Node obj = (Node)i.next();
      obj.killConnections();
      objects.remove(obj);
      rootGroup.remove(obj.returnGroup());
    }
    currentSelectedObjects.removeAllElements();
    currentSelectedConnections.removeAllElements();
    println(currentSelectedObjects.size());
  } 


  void editModeButton() {
    DropShadow shadow = new DropShadow();
    shadow.setRadius(3);
    SGGroup eGroup = new SGGroup();
    SGText editBtnText = new SGText();
    editBtnText.setFont(new Font("Helvetica", Font.PLAIN, 18));
    editBtnText.setLocation(new Point(25, 23));
    editBtnText.setAntialiasingHint(RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
    editBtnText.setText("e");
    editBtnText.setFillPaint(Color.BLACK);



    SGText snapBtnText = new SGText();
    snapBtnText.setFont(new Font("Helvetica", Font.PLAIN, 18));
    snapBtnText.setLocation(new Point(146, 23));
    snapBtnText.setAntialiasingHint(RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
    snapBtnText.setText("s");
    snapBtnText.setFillPaint(Color.BLACK);

    snapModeButton.setEffect(eBtnShadow);
    snapModeButton.setShape(new RoundRectangle2D.Float(0, 0, 20, 20, 6, 6));
    snapModeButton.setTranslateX(140 );
    snapModeButton.setTranslateY(8);
    snapModeButton.setFillPaint(new Color(200,200,200));      
    snapModeButton.setMode(SGShape.Mode.STROKE_FILL); 
    snapModeButton.setDrawStroke(new BasicStroke(2.0f));
    snapModeButton.setDrawPaint(new Color(150,150,150));
    snapModeButton.setAntialiasingHint(RenderingHints.VALUE_ANTIALIAS_ON);
    snapModeButton.setEffect(shadow);
    snapModeButton.addMouseListener(new SGMouseAdapter() {
      Point pos;
      void mousePressed(MouseEvent e, SGNode n) {
        FXShape node = (FXShape)n;
        if(snapMode){
          snapMode = false;
          grid.setVisible(false);
          snapModeButton.setFillPaint(new Color(200,200,200));  
        }
        else {
          snapMode = true;
          grid.setVisible(true);
          snapModeButton.setFillPaint(new Color(150,150,150));
        }
      }
    }
    );

    editModeButton.setEffect(eBtnShadow);
    editModeButton.setShape(new RoundRectangle2D.Float(0, 0, 20, 20, 6, 6));
    editModeButton.setTranslateX(20 );
    editModeButton.setTranslateY(8);
    editModeButton.setFillPaint(new Color(200,200,200));      
    editModeButton.setMode(SGShape.Mode.STROKE_FILL); 
    editModeButton.setDrawStroke(new BasicStroke(2.0f));
    editModeButton.setDrawPaint(new Color(150,150,150));
    editModeButton.setAntialiasingHint(RenderingHints.VALUE_ANTIALIAS_ON);
    editModeButton.setEffect(shadow);
    editModeButton.addMouseListener(new SGMouseAdapter() {
      Point pos;
      void mousePressed(MouseEvent e, SGNode n) {
        FXShape node = (FXShape)n;
        if(editMode){
          editMode = false;
          editModeLabel.setText("Edit Mode");
          editModeButton.setFillPaint(new Color(150,150,150));
        }
        else {
          editMode = true;
          editModeLabel.setText("User Mode");
          editModeButton.setFillPaint(new Color(200,200,200));  
        }
      }
    }
    );
    eGroup.add(snapModeButton);
    eGroup.add(snapBtnText);
    eGroup.add(editModeButton);
    eGroup.add(editBtnText);
    menu.add(eGroup);
  }



  void alignVertical() {
    Float averageVal = 0f;
    for(Iterator i = currentSelectedObjects.iterator(); i.hasNext();) {
      Node n = (Node)i.next();
      averageVal += n.getGlobalX() - n.groupT.getTranslateX();
    }
    averageVal /= currentSelectedObjects.size();
    for(Iterator i = currentSelectedObjects.iterator(); i.hasNext();) {
      Node n = (Node)i.next();
      n.groupT.setTranslateX(averageVal);
      n.updateConnectionLines();    
    }
  }

  void alignHorizontal() {
    Float averageVal = 0f;
    for(Iterator i = currentSelectedObjects.iterator(); i.hasNext();) {
      Node n = (Node)i.next();
      averageVal += n.getGlobalY() - n.groupT.getTranslateY();
    }
    averageVal /= currentSelectedObjects.size();
    for(Iterator i = currentSelectedObjects.iterator(); i.hasNext();) {
      Node n = (Node)i.next();
      n.groupT.setTranslateY(averageVal);
      n.updateConnectionLines();  
    }
  }


}




