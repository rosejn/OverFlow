package overFlow.main;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.util.Iterator;



import overFlow.main.Node;

import com.sun.scenario.effect.DropShadow;
import com.sun.scenario.scenegraph.SGComponent;
import com.sun.scenario.scenegraph.SGGroup;
import com.sun.scenario.scenegraph.SGShape;
import com.sun.scenario.scenegraph.SGText;
import com.sun.scenario.scenegraph.SGNode;
import com.sun.scenario.scenegraph.SGTransform;
import com.sun.scenario.scenegraph.event.SGKeyListener;
import com.sun.scenario.scenegraph.event.SGMouseAdapter;
import com.sun.scenario.scenegraph.fx.FXShape;

/*
this class is used to control:
 - selection tool
 - menubar (not implemented yet)
 - manage main frame key and mouse events for object creation and selection tool
 */

public class MainFrameInput {          
  public SGGroup selectionGroup = new SGGroup();
  public SGTransform.Translate sGroup = SGTransform.createTranslation(0, 0, selectionGroup);
  public SGGroup selectedGroup = new SGGroup();
  public SGGroup group = new SGGroup();
  public SGGroup menu = new SGGroup();

  public FXShape selectionBox = new FXShape();
  public FXShape menuBackground = new FXShape();
  public FXShape editModeButton = new FXShape();
  public FXShape snapModeButton = new FXShape();

  public SGShape window = new SGShape();

  public static boolean shiftDown = false;
  public boolean selecting = false;
  public static boolean creatingObject;
  
  public char[] newObjectName = new char[1];
  public static ObjectCreator objCreator;

  public static float windowX;
  public static float windowY;
  public static float pWindowX;
  public static float pWindowY;
  public static float yVel;
  public static float xVel;

  private char letter;

  public static long oldTime;
  
  public SelectionTools selectionTool = new SelectionTools();
  public SelectionManager selectionManager = new SelectionManager();

  
  public MainFrameInput() {    

    OverFlowMain.grid.setVisible(true);

    
    
    
    group.add(selectedGroup);
    group.add(window);
    OverFlowMain.rootGroup.add(OverFlowMain.grid.returnLineGroup());
    OverFlowMain.rootGroup.add(group);
    
    
    objCreator = new ObjectCreator(OverFlowMain.frameMouseX, OverFlowMain.frameMouseY);

    window.setShape(new Rectangle2D.Float(0,0,1000,1000));
    window.setMode(SGShape.Mode.STROKE); 
    window.setDrawStroke(new BasicStroke(0.0f));
    window.setDrawPaint(new Color(150,150,150, 0));
    window.addMouseListener(new SGMouseAdapter() {		//Contains all of the main window mouse interaction, object creation calls, etc
      Point2D pos;
      Point2D pPos;
      Point2D p;
      Point2D new_p;
      public void mouseMoved(MouseEvent e, SGNode n) {
        pos = e.getPoint();
        windowX = (float) pos.getX();
        windowY = (float) pos.getY();
      }
      
      public void mousePressed(MouseEvent e, SGNode n){
    	  selectionManager.pressed(e);
        new_p = e.getPoint();
        
        if(OverFlowMain.editMode){
          pPos = e.getPoint();    //set global variables
          windowX = (float) pPos.getX();
          windowY = (float) pPos.getY();

          if(creatingObject && !objCreator.over){  //if creating a new object and click is outside of it, finish creating it
            objCreator.setVisible(false);
            creatingObject = false;
          }

          if(OverFlowMain.sys.nanoTime() - oldTime < 2.0000000E8) {
            if(!OverFlowMain.objectOver && !OverFlowMain.overMenu){
              creatingObject = true;
              objCreator.setLocation(MainFrameInput.windowX, MainFrameInput.windowY);
              objCreator.setVisible(true);
            }
          }
          oldTime = OverFlowMain.sys.nanoTime();
        p = e.getPoint();
      }
      }
      
      public void mouseExited(MouseEvent e, SGNode n) {
      }
      public void mouseReleased(MouseEvent e, SGNode n) {
    	  selectionManager.released(e);
      	  OverFlowMain.frameDragged = false;
      }
      public void mouseDragged(MouseEvent e, SGNode n) {
    	  selectionManager.dragged(e);
        if(OverFlowMain.currentSelectedObjects.size() > 1) {
          sGroup.translateBy(xVel, yVel);

        }
        OverFlowMain.frameDragged = true;
        pos = e.getPoint();
        new_p = pos;

        /////Global window variables
        windowX = (float) pos.getX();
        windowY = (float) pos.getY();

        if(windowX - pWindowX < 100){
          xVel = windowX - pWindowX;
        }
        else {
          xVel = 0;
        }
        if(windowY - pWindowY < 100){
          yVel = windowY - pWindowY;
        }
        else {
          yVel = 0;
        }
        /////end globals

        if(OverFlowMain.editMode && !OverFlowMain.connecting){
          SelectionTools.draggUpdate(pPos, pos);
        }

          pWindowX = windowX;
          pWindowY = windowY;
        
        p = pos;
      }

      }
    );

    window.addKeyListener(new SGKeyListener() {
      public void keyPressed(java.awt.event.KeyEvent e, SGNode node) {        	 
    	  
    	  if(e.getModifiers() == 8 && e.getKeyCode() == 69){
    		  if(OverFlowMain.getEditMode()) {
    		  OverFlowMain.setEditMode(false);
    		  }
    		  else {
              OverFlowMain.setEditMode(true);  
    		  }
    	  }
    	  
    	  
    	  if(e.getModifiers() == 1){		// Set shift boolean for selecting multiple objects
    		  if(shiftDown) {
    			  shiftDown = false;
    		  }
    		  else {
    			  shiftDown = true;
    		  }
    	  }
    	  if(e.getKeyCode() == 27){
    		 System.exit(0); 		 
    	 }
    	  selectionManager.keyTyped(e);
      }
      public void keyReleased(java.awt.event.KeyEvent e, SGNode node) {
      }
      public void keyTyped(java.awt.event.KeyEvent e, SGNode node) {
      }      
    }
    );
  }

}




